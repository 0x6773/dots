#! /bin/zsh
# ~/.dot/.tunnelsshrc

INTERFACENET=$(route -nve|grep -e '^0.0.0.0'|grep -o '[^ ]*$')
INTERFACE="tun2socks"
SCREENSSHNAME="ssh4tunnel"
SCREENTUNNAME="tun2socks"
PORT="1235"
DNSSERVER=$(cat /etc/resolv.conf|grep nameserver|head -1|grep -o '[^ ]*$')
USER_SERVER=""
TUNIPPRE="192.168.0"
TUNXIP="$TUNIPPRE.1"
TUNXMASK="255.255.255.0"
TUN2SOCKSIP="$TUNIPPRE.2"
NETGW=$(route -nve|grep -e '^0.0.0.0'|awk '{print $2}')
BADVPN="$HOME/badvpn/badvpn-build/tun2socks/badvpn-tun2socks"

# save last connected server to file
__US_FILE="$HOME/.dot/user_server.ignore"
# check so that not able to reconnect
__RN_FILE="$HOME/.dot/tunnel_check.ignore"

_interface_tun()
{
	mode=$1
	if [ $mode -eq 0 ]; then
		echo "Creating interface $INTERFACE"
		sudo ip tuntap add dev $INTERFACE mode tun user $USER
		echo "Setting ip settings to $INTERFACE"
		sudo ifconfig $INTERFACE $TUNXIP netmask $TUNXMASK
	else
		echo "Destroying interface $INTERFACE"
		sudo ip tuntap del dev $INTERFACE mode tun
	fi
}

_screen_tun()
{
	mode=$1
	if [ $mode -eq 0 ]; then
		echo "Starting ssh"
		screen -d -m -S $SCREENSSHNAME ssh -D$PORT $USER_SERVER
		echo "Starting tun2socks"
		screen -d -m -S $SCREENTUNNAME $BADVPN  --tundev $INTERFACE --netif-ipaddr $TUN2SOCKSIP --netif-netmask $TUNXMASK --socks-server-addr 127.0.0.1:$PORT
	else
		echo "Destroying screens"
		screen -S $SCREENSSHNAME -X quit
		screen -S $SCREENTUNNAME -X quit
	fi
}

_route_tun()
{
	mode=$1
	if [ $mode -eq 0 ]; then
		echo "Setting routes"
		sudo route add 140.98.193.112 gw $NETGW metric 5
		sudo route add $SERVER gw $NETGW metric 5
		sudo route add $DNSSERVER gw $NETGW metric 5
		sudo route add -net 10.0.0.0/8 gw $NETGW metric 5
		sudo route add default gw $TUN2SOCKSIP metric 6
	else
		echo "Deleting routes"
		sudo route del 140.98.193.112 gw $NETGW metric 5
		sudo route del $SERVER gw $NETGW metric 5
		sudo route del $DNSSERVER gw $NETGW metric 5
		sudo route del -net 10.0.0.0/8 gw $NETGW metric 5
		sudo route del default gw $TUN2SOCKSIP metric 6
	fi
}

start_tun()
{
	# check if server is provided as argument
	if [[ $# -ge 1 ]]; then
		USER_SERVER="$1"
		echo $USER_SERVER > $__US_FILE
	# or connect to last connected
	elif [[ -f  $__US_FILE ]]; then
		USER_SERVER="$(cat $__US_FILE)"
	# or print usage
	else
		echo "Usage: $0 USER@SERVER"
		return
	fi

	if [[ ! -f  $__RN_FILE ]]; then
		echo "0" > $__RN_FILE;
	else
		__RN_STATUS="$(cat $__RN_FILE)"
		if [[ "$__RN_STATUS" = "1" ]]; then
			echo "${red}Already running. ${green}restart or stop";
			return;
		fi
	fi


	SERVER=$(echo "$USER_SERVER"|grep -Po "(?<=@).*")
	
	# 0 for start
	# 1 for stop
	_interface_tun 0
	_screen_tun 0
	_route_tun 0
	echo "1" > $__RN_FILE;
}

stop_tun()
{
	if [[ -f  $__US_FILE ]]; then
		USER_SERVER="$(cat $__US_FILE)"
	else
		echo "This should not happen"
		return
	fi

	if [[ ! -f  $__RN_FILE ]]; then
		echo "0" > $__RN_FILE;
	else
		__RN_STATUS="$(cat $__RN_FILE)"
		if [[ "$__RN_STATUS" = "0" ]]; then
			echo "${red}Not running. ${green}start first";
			return;
		fi
	fi

	SERVER=$(echo "$USER_SERVER"|grep -Po "(?<=@).*")
	# 0 for start
	# 1 for stop
	_route_tun 1
	_screen_tun 1
	_interface_tun 1

	echo "0" > $__RN_FILE;
}

restart_tun()
{
	stop_tun
	start_tun
}
